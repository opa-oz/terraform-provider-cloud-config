package ccmodules

import (
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opa-oz/terraform-provider-cloud-config/internal/utils"
)

type SaltMinion struct {
	PkgName     types.String `tfsdk:"pkg_name"`
	ServiceName types.String `tfsdk:"service_name"`
	ConfigDir   types.String `tfsdk:"config_dir"`
	// Conf        *types.Dynamic `tfsdk:"conf"`
	// Grains      *types.Dynamic `tfsdk:"grains"`
	PublicKey  types.String `tfsdk:"public_key"`
	PrivateKey types.String `tfsdk:"private_key"`
	PkiDir     types.String `tfsdk:"pki_dir"`
}
type SaltMinionOutput struct {
	PkgName     string `yaml:"pkg_name,omitempty"`
	ServiceName string `yaml:"service_name,omitempty"`
	ConfigDir   string `yaml:"config_dir,omitempty"`
	// Conf        *map[string]any `yaml:"conf,omitempty"`
	// Grains      *map[string]any `yaml:"grains,omitempty"`
	PublicKey  string `yaml:"public_key,omitempty"`
	PrivateKey string `yaml:"private_key,omitempty"`
	PkiDir     string `yaml:"pki_dir,omitempty"`
}

type SaltMinionModel struct {
	SaltMinion *SaltMinion `tfsdk:"salt_minion"`
}

type SaltMinionOutputModel struct {
	SaltMinion *SaltMinionOutput `yaml:"salt_minion,omitempty"`
}

// SaltMinionBlock
// @see https://cloudinit.readthedocs.io/en/latest/reference/modules.html#salt-minion
func SaltMinionBlock() CCModuleNested {
	return CCModuleNested{
		block: map[string]schema.Block{
			"salt_minion": schema.SingleNestedBlock{
				PlanModifiers: []planmodifier.Object{
					utils.NullWhen(path.Root("salt_minion")),
				},
				MarkdownDescription: `
This module installs, configures and starts Salt Minion. If the salt_minion key is present in the config parts, then Salt Minion will be installed and started.

Configuration for Salt Minion can be specified in the conf key under salt_minion. Any config values present there will be assigned in /etc/salt/minion. The public and private keys to use for Salt Minion can be specified with public_key and private_key respectively.

If you have a custom package name, service name, or config directory, you can specify them with pkg_name, service_name, and config_dir respectively.

Salt keys can be manually generated by salt-key --gen-keys=GEN_KEYS, where GEN_KEYS is the name of the keypair, e.g. ‘’minion’’. The keypair will be copied to /etc/salt/pki on the Minion instance.
        `,
				Attributes: map[string]schema.Attribute{
					"pkg_name": schema.StringAttribute{
						MarkdownDescription: "Package name to install. Default: `salt-minion`.",
						Optional:            true,
					},
					"service_name": schema.StringAttribute{
						MarkdownDescription: "Service name to enable. Default: `salt-minion`.",
						Optional:            true,
					},
					"config_dir": schema.StringAttribute{
						MarkdownDescription: "Directory to write config files to. Default: `/etc/salt`.",
						Optional:            true,
					},
					// TODO: Support dynamic attribute
					// "conf": schema.DynamicAttribute{
					// 	CustomType:          types.DynamicType,
					// 	MarkdownDescription: "Configuration to be written to `config_dir/minion`.",
					// 	Optional:            true,
					// },
					// "grains": schema.DynamicAttribute{
					// 	CustomType:          types.DynamicType,
					// 	MarkdownDescription: "Configuration to be written to `config_dir/grains`.",
					// 	Optional:            true,
					// },
					"public_key": schema.StringAttribute{
						MarkdownDescription: "Public key to be used by the salt minion.",
						Optional:            true,
					},
					"private_key": schema.StringAttribute{
						MarkdownDescription: "Private key to be used by salt minion.",
						Optional:            true,
					},
					"pki_dir": schema.StringAttribute{
						MarkdownDescription: "Directory to write key files. Default: `config_dir/pki/minion`.",
						Optional:            true,
					},
				},
			},
		},
	}
}
